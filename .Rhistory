integrated_seurat <- FindClusters(integrated_seurat, resolution = 0.6, cluster.name = "rpca_clusters")
# run the UMAP with the integration rpca
integrated_seurat <- RunUMAP(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", reduction.name = "umap.rpca")
#visualize by batch and cell type annotation
pRPCA <- DimPlot(integrated_seurat, reduction = "umap.rpca", group.by = c("orig.ident", "Original_clusterID","rpca_clusters" ), combine = FALSE)
pRPCA
# find the clusters in the integrated object
#integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca")
#integrated_seurat <- FindClusters(integrated_seurat, resolution = 0.6, cluster.name = "rpca_clusters")
# run the UMAP with the integration rpca
#integrated_seurat <- RunUMAP(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", reduction.name = "umap.rpca")
#visualize by batch and cell type annotation
#pRPCA <- DimPlot(integrated_seurat, reduction = "umap.rpca", group.by = c("orig.ident", "Original_clusterID","rpca_clusters" ), combine = FALSE)
pRPCA
integrated_seurat <- IntegrateLayers(
object = integrated_seurat, method = HarmonyIntegration,
orig.reduction = "pca", new.reduction = "harmony",
verbose = FALSE
)
# find the clusters in the integrated object
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "harmony")
integrated_seurat <- FindClusters(integrated_seurat, resolution = 0.6, cluster.name = "harmony_clusters")
# run the UMAP with the integration rpca
integrated_seurat <- RunUMAP(integrated_seurat, dims = 1:20, reduction = "harmony", reduction.name = "umap.harmony")
#visualize by batch and cell type annotation
pHarmony <- DimPlot(integrated_seurat, reduction = "umap.harmony", group.by = c("orig.ident", "Original_clusterID","harmony_clusters"), combine = FALSE)
pHarmony
wrap_plots(c(pMerge, pMergeSCT, pRPCA, pHarmony), ncol = 3, byrow = F)
library(patchwork)
wrap_plots(c(pMerge, pMergeSCT, pRPCA, pHarmony), ncol = 3, byrow = F)
DefaultAssay(merge_seurat) <- "SCT"
merge_seurat <- FindNeighbors(merge_seurat, dims = 1:30, reduction = "pca")
merge_seurat <- FindClusters(merge_seurat, resolution = 0.6, cluster.name = "unintegrated_clusters.SCT")
# run UMAP on the none integrated input
merge_seurat <- RunUMAP(merge_seurat , dims = 1:20, reduction = "pca", reduction.name = "umap.unintegrated.SCT")
# visualize with the previous celltype annotations
pMergeSCT <- DimPlot(merge_seurat, reduction = "umap.unintegrated.SCT", group.by = c("orig.ident", "Original_clusterID","unintegrated_clusters"), combine = FALSE)
pMergeSCT
# this will run on the SCT values
merge_seurat <- RunPCA(merge_seurat)
DefaultAssay(merge_seurat) <- "SCT"
merge_seurat <- FindNeighbors(merge_seurat, dims = 1:30, reduction = "pca")
merge_seurat <- FindClusters(merge_seurat, resolution = 0.6, cluster.name = "unintegrated_clusters.SCT")
# run UMAP on the none integrated input
merge_seurat <- RunUMAP(merge_seurat , dims = 1:20, reduction = "pca", reduction.name = "umap.unintegrated.SCT")
# visualize with the previous celltype annotations
pMergeSCT <- DimPlot(merge_seurat, reduction = "umap.unintegrated.SCT", group.by = c("orig.ident", "Original_clusterID","unintegrated_clusters"), combine = FALSE)
pMergeSCT
wrap_plots(c(pMerge, pMergeSCT, pRPCA, pHarmony), ncol = 3, byrow = F)
wrap_plots(c(pMerge, pMergeSCT, pRPCA, pHarmony), ncol = 4, byrow = F)
# Join
integrated_seurat <- JoinLayers(integrated_seurat)
# process the integrated object - SCTransform runs normalize, scale and find variable genes
integrated_seurat <- SCTransform(integrated_seurat, do.scale = TRUE, variable.features.n = 3000)
View(merge_seurat)
View(merge_seurat)
View(integrated_seurat)
saveRDS(integrated_seurat, paste(temp_pathway,"integrated_seurat.rds", sep = ""))
colnames(integrated_seurat@graphs)
integrated_seurat@graphs
integrated_seurat@reductions
# plot the
ElbowPlot(integrated_seurat, ndims=30, reduction = "pca")
ElbowPlot(integrated_seurat, ndims=30, reduction = "integrated.rpca")
# plot the standard deviations in the pca
ElbowPlot(integrated_seurat, ndims=30, reduction = "pca")
# standard deviation isn't calculated in the rpca method
ElbowPlot(integrated_seurat, ndims=30, reduction = "harmony")
# plot the standard deviations in the pca
ElbowPlot(integrated_seurat, ndims=30, reduction = "pca")
# standard deviation isn't calculated in the rpca method or harmony
?RunPCA
View(integrated_seurat)
# this will run on the SCT values
DefaultAssay(integrated_seurat) <- "SCT"
integrated_seurat <- RunPCA(integrated_seurat, reduction.name = "sct.pca")
#merge_seurat <- RunPCA(merge_seurat, reduction.name = "sct.pca")
# see the importance of the dim reduction components using different feature input
# what reductions do we have?
integrated_seurat@reductions
# plot the standard deviations in the pca
ElbowPlot(integrated_seurat, ndims=30, reduction = "pca")
ElbowPlot(integrated_seurat, ndims=30, reduction = "sct.pca")
# standard deviation isn't calculated in the rpca method or harmony
#Assess how many PCs capture most of the information in the data
integrated_seurat <-JackStraw(integrated_seurat, reduction = "integrated.rpca",
dims = 30)
# we already ran the FindNeighors function but with more pcs before and the default k.param
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", k.param = 95)
# now we will run a vector of resolutions
integrated_seurat <- FindClusters(integrated_seurat, resolution = c(0, 0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0))
clustree(integrated_seurat, prefix = "RNA_snn_res.")
View(integrated_seurat)
# we already ran the FindNeighors function but with more pcs before and the default k.param
DefaultAssay(integrated_seurat) <- "RNA"
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", k.param = 95)
# now we will run a vector of resolutions
integrated_seurat <- FindClusters(integrated_seurat, resolution = c(0, 0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0))
library(clustree)
clustree(integrated_seurat, prefix = "RNA_snn_res.")
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
resolutions
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
DimPlot(integrated_seurat, reduction = "umap.rpca", group.by =  "Original_clusterID")
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
resolutions2 <- paste("SCT_snn_res.", res, sep="")
for(r in resolutions2){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
merge_seurat <- RunUMAP(merge_seurat , dims = 1:20, reduction = "pca", reduction.name = "umap.SCT")
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
resolutions2 <- paste("SCT_snn_res.", res, sep="")
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
for(r in resolutions)2{
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
resolutions2 <- paste("SCT_snn_res.", res, sep="")
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
for(r in resolutions2){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.sct")
}
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", k.param = c(20,40, 60, 100)
)
?FindNeighbors
integrated_seurat.95 <- integrated_seurat
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", k.param= 20)
# now we will run a vector of resolutions
integrated_seurat <- FindClusters(integrated_seurat, resolution = c(0, 0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0))
clustree(integrated_seurat, prefix = "RNA_snn_res.")
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
#integrated_seurat.95 <- integrated_seurat
integrated_seurat.20 <- integrated_seurat
integrated_seurat <- FindNeighbors(integrated_seurat, dims = 1:20, reduction = "integrated.rpca", k.param= 44)
# now we will run a vector of resolutions
integrated_seurat <- FindClusters(integrated_seurat, resolution = c(0, 0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0))
clustree(integrated_seurat, prefix = "RNA_snn_res.")
res <- c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0)
resolutions <- paste("RNA_snn_res.", res, sep="")
for(r in resolutions){
print(DimPlot(integrated_seurat, group.by = r),reduction = "umap.rpca")
}
# we need to select the level of clustering that we want to annotate
Idents(integrated_seurat) <- "RNA_snn_res.0.4"
ClusterMarkers <- FindAllMarkers(integrated_seurat, only.pos = TRUE, test.use = "MAST")
# optional: save the cluster markers
write.csv(ClusterMarkers,"ClusterMarkers.csv")
# note this took a very long time to run - will it be faster with wilcoxin?
ClusterMarkers
top5 <- ClusterMarkers %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5
DotPlot(integrated_seurat, features = c("TREM2"))
DotPlot(integrated_seurat, features = c("TREM2","TMEM26"))
Idents(integrated_seurat) <- "RNA_snn_res.0.2"
ClusterMarkers2 <- FindAllMarkers(integrated_seurat, only.pos = TRUE, test.use = "wilcox")
View(ClusterMarkers)
View(ClusterMarkers)
# optional: save the cluster markers
write.csv(ClusterMarkers2,"ClusterMarkersRes02.csv")
# note this took a very long time to run - will it be faster with wilcoxin?
ClusterMarkers2
top5
mgmarkers <- c("AIF1","P2RY12","P2RY13","TREM119","GPR34","TREM2","CD40","ITGAM","MERTK","HEXB")
DotPlot(integrated_seurat, features = mgmarkers)
mgmarkers <- c("AIF1","P2RY12","P2RY13","TREM119","GPR34","TREM2","CD40","ITGAM","MERTK","HEXB")
DotPlot(integrated_seurat, features = mgmarkers) + RotatedAxis()
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=10, wt =avg_log2FC)
top5
#DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=4, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=10, wt =avg_log2FC)
top5
#DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=10, wt =avg_log2FC)
top5
#DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
clustMarkers <- c("GRASP","NEDD9","NR4A3")
DotPlot(integrated_seurat, features = clustMarkers) + RotatedAxis()
mgmarkers <- c("AIF1","P2RY12","P2RY13","TREM119","GPR34","TREM2","CD40","ITGAM","MERTK","HEXB")
DotPlot(integrated_seurat, features = mgmarkers) + RotatedAxis()
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
#top5.2 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2 <- ClusterMarkers %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5.2 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5.2 <- ClusterMarkers2 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5.2 <- ClusterMarkers2 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
# Microglia markers
mgmarkers <- c("AIF1","P2RY12","P2RY13","TREM119","GPR34","TREM2","CD40","ITGAM","MERTK","HEXB")
DotPlot(integrated_seurat, features = mgmarkers) + RotatedAxis()
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4")
top5.2 <- ClusterMarkers2 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5 <- ClusterMarkers %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4") + RotatedAxis()
top5.2 <- ClusterMarkers2 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.4", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.4") + RotatedAxis()
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5.2$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5.2 <- ClusterMarkers2 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=3, wt =avg_log2FC)
top5.2
DoHeatmap(integrated_seurat, features = top5.2$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5.2$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
?FindAllMarkers
Idents(integrated_seurat) <- "RNA_snn_res.0.2"
ClusterMarkers3 <- FindAllMarkers(integrated_seurat, assay = "RNA", only.pos = TRUE, test.use = "wilcox", slot = "scale.data", logfc.threshold = 0.25, min.cells.feature = 20, min.pct = 0.05)
ClusterMarkers4 <- FindAllMarkers(integrated_seurat, assay = "RNA", only.pos = TRUE, test.use = "wilcox", slot = "data", logfc.threshold = 0.25, min.cells.feature = 20, min.pct = 0.05)
top5 <- ClusterMarkers3 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
View(ClusterMarkers3)
View(ClusterMarkers4)
View(ClusterMarkers3)
View(ClusterMarkers3)
head(ClusterMarkers3)
top5 <- ClusterMarkers3 %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=5, wt =avg_diff)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5 <- ClusterMarkers4 %>% filter(p_val_adj < 0.01 & pct.1 > 0.05) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5 <- ClusterMarkers4 %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=5, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5 <- ClusterMarkers4 %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=3, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5 <- ClusterMarkers4 %>% filter(p_val_adj < 0.01) %>% group_by(cluster) %>% top_n(n=3, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2", slot = "data") + RotatedAxis()
top5 <- ClusterMarkers4 %>% filter(p_val_adj < 0.001) %>% group_by(cluster) %>% top_n(n=3, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
ClusterMarkers6 <- FindAllMarkers(integrated_seurat, assay = "SCT", only.pos = TRUE, test.use = "wilcox", slot = "data", logfc.threshold = 0.5, min.cells.feature = 25, min.pct = 0.1)
head(ClusterMarkers6)
ClusterMarkers5 <- FindAllMarkers(integrated_seurat, assay = "RNA", only.pos = TRUE, test.use = "wilcox", slot = "data", logfc.threshold = 0.5, min.cells.feature = 25, min.pct = 0.1)
top5 <- ClusterMarkers5 %>% filter(p_val_adj < 0.001) %>% group_by(cluster) %>% top_n(n=3, wt =avg_log2FC)
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
top5
DoHeatmap(integrated_seurat, features = top5$gene, size = 3, angle = 90, group.by = "RNA_snn_res.0.2", slot = "scale.data")
DotPlot(integrated_seurat, features = top5$gene, group.by = "RNA_snn_res.0.2") + RotatedAxis()
ClusterMarkers5 %>% filter(p_val_adj < 0.001) %>% group_by(cluster)
table(ClusterMarkers5 %>% filter(p_val_adj < 0.001) %>% group_by(cluster))
ClusterMarkers5 %>% filter(p_val_adj < 0.001) %>% count_by(cluster)
ClusterMarkers5 %>% filter(p_val_adj < 0.001) %>% group_by(cluster) %>%
summarize(count = n())
ClusterMarkers <- ClusterMarkers5
write(ClusterMarkers, "ClusterMarkersRes02.csv")
write.csv(ClusterMarkers, "ClusterMarkersRes02.csv")
#saveRDS(integrated_seurat,"integrated_seurat.rds")
# temp code
saveRDS(integrated_seurat, paste(temp_pathway,"integrated_seurat_clusters.rds", sep = ""))
seu <- readRDS("/Users/rhalenathomas/Library/CloudStorage/OneDrive-McGillUniversity/Documents/Data/FlowCytometry/PhenoID/Analysis/iScienceSubmission/Figure7_timecourse/Analysis/SeuratSubTimeline.RDS")
seu <- RunUMAP(seu, n.neighbors = 45, b = 0.65, a = 0.65, spread = 3, dims = 1:10)
library(Seurat)
seu <- RunUMAP(seu, n.neighbors = 45, b = 0.65, a = 0.65, spread = 3, dims = 1:10)
DimPlot(seu, group.by = "CelltypesMainNew", label = TRUE)
seu.1 <- RunUMAP(seu, n.neighbors = 60, b = 0.65, a = 0.65, spread = 5, dims = 1:10)
DimPlot(seu.1, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu.1, group.by = "CelltypesMainNew", label = TRUE)
seu.2 <- RunUMAP(seu, n.neighbors = 50, b = 0.68, a = 0.68, spread = 2, dims = 1:10)
DimPlot(seu, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu.1, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu.2, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu.2, group.by = "seurat_clusters", label = TRUE)
DimPlot(seu, group.by = "seurat_clusters", label = TRUE)
DimPlot(seu.1, group.by = "seurat_clusters", label = TRUE)
DimPlot(seu.2, group.by = "seurat_clusters", label = TRUE)
seu.4 <- RunUMAP(seu, n.neighbors = 45, b = 0.6, a = 0.8, spread = 5, dims = 1:10)
DimPlot(seu.4, group.by = "seurat_clusters", label = TRUE)
seu.5 <- RunUMAP(seu, n.neighbors = 45, b = 0.7, a = 0.8, spread = 2, dims = 1:10)
DimPlot(seu.5, group.by = "seurat_clusters", label = TRUE)
DimPlot(seu.5, group.by = "seurat_clusters", label = TRUE)
seu <- seu.5
DimPlot(seu, group.by = "seurat_clusters", label = TRUE)
AB <- c("TH","CD24","CD56","CD29","CD15","CD184","CD133","SSEA4","CD44","CD49f","CD140a")
# the cluster labels will match the active ident
Idents(seu) <- "RNA_snn_res.1"
# this will let us see one at at time
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE))
}
colnames(seu@meta.data)
DimPlot(seu, group.by = "RNA_snn_res.1", label=TRUE, label.size = 6)
DimPlot(seu, group.by = "Days_in_FD", label=TRUE, label.size = 6)
DimPlot(seu, group.by = "Replicate", label=TRUE, label.size = 6)
# summary heat map
# use function plotmean
# we need to know how many clusters we have.  They will be index 0 to n-1
# you need to pick the length to annotate
length(unique(seu$RNA_snn_res.1))
# 15
# if we want to plot by cluster we need a vector of from 0 to the n-1 clusters
cluster.num <- c(0:17)
plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.1', markers = AB,
var_names = cluster.num, slot = 'scale.data', xlab = "Cluster",
ylab = "Antibody")
library(CelltypeR)
plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.1', markers = AB,
var_names = cluster.num, slot = 'scale.data', xlab = "Cluster",
ylab = "Antibody")
DimPlot(seu, group.by = "Sample")
DimPlot(seu, group.by = "CAM35", label = TRUE, label.size = 6)
DimPlot(seu, group.by = "CAM35", label = TRUE, label.size = 3)
DimPlot(seu, group.by = "seu.pred", reduction = "umap")
DimPlot(seu, group.by = "Seu", label = TRUE, label.size = 3)
View(seu)
DimPlot(seu, group.by = "SeuLabel", label = TRUE, label.size = 3)
DimPlot(seu, group.by = "CelltypesMainNew", label = TRUE)
DimPlot(seu, group.by = "Days_in_FD")
DimPlot(seu, split.by = "Days_in_FD", ncol = 2, label = TRUE)
DimPlot(seu, split.by = "Replicate", ncol = 2, label = TRUE, label.size = 2)
# set up colours to match Fig 4,5 where possible
cell.order <- c("Astrocytes 1","Astrocytes 2","RG1a-Astrocytes 1","RadialGlia 1",
"RadialGlia 1a","RadialGlia 2","RadialGlia 3",
"DA-neurons 1","Neurons 1","Neurons 2","DA-NPC","NPC",
"OPC-like",
"RG-oligo",
"Stem-cell-like")
# add TH specific
clust.colours <- c("chocolate2",# Astrocytes 1
"darkorange", # Astrocytes 2
"salmon",  # RG1a-Astrocytes
"pink", # RG1
"deeppink",# RG1a
"plum1", #RG2
"lightpink3",# RG3
"slateblue", #"DA-Neuron"
"mediumpurple1",# neurons 1
"purple",# Neurons2
#"mistyrose2", #glialineage
#"steelblue3",# epithelial
#"deepskyblue", # endothelial
"thistle2",   #DA-NPC
"plum3", # NPC
#"mediumslateblue", # Neural lineage
# "seagreen3",#Oligo
# "olivedrab4", # OPC
"darkseagreen3",#OPC like
"yellowgreen", # RG-oligo
"tomato3",# stem like - NPC-RG-div
"burlywood3" #extra
)
UMAP_7B <- DimPlot(seu.t, cols = clust.colours, shuffle = TRUE,
raster=FALSE, pt.size = 0.1, label = TRUE,
group.by = "CelltypesMainNew",
order = rev(cell.order)) +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
UMAP_7B <- DimPlot(seu, cols = clust.colours, shuffle = TRUE,
raster=FALSE, pt.size = 0.1, label = TRUE,
group.by = "CelltypesMainNew",
order = rev(cell.order)) +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
library(ggplot2)
UMAP_7B <- DimPlot(seu, cols = clust.colours, shuffle = TRUE,
raster=FALSE, pt.size = 0.1, label = TRUE,
group.by = "CelltypesMainNew",
order = rev(cell.order)) +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
UMAP_7B
UMAP_7B_label <- DimPlot(seu, cols = clust.colours, shuffle = TRUE,
raster=FALSE, pt.size = 0.001, label = TRUE,
group.by = "CelltypesMainNew",
order = rev(cell.order))
UMAP_7B_label
UMAP_7B <- DimPlot(seu, cols = alpha(clust.colours), shuffle = TRUE,
raster=FALSE, pt.size = 0.001, label = TRUE,
group.by = "CelltypesMainNew",
order = rev(cell.order)) +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
# save the plot
pdf("UMAPtimeCourseLabelled.pdf",width = 9, height = 5)
UMAP_7B_label +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
pdf("UMAPtimeCourse.pdf",width = 9, height = 5)
UMAP_7B +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
png("UMAPtimeCourse.png",width = 1000, height = 600)
UMAP_7B +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
UMAP_7B_label
UMAP_7B <- DimPlot(seu, cols = alpha(clust.colours), shuffle = TRUE,
raster=FALSE, pt.size = 0.001, label = FALSE,
group.by = "CelltypesMainNew",
order = rev(cell.order)) +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
# save the plot
pdf("UMAPtimeCourseLabelled.pdf",width = 9, height = 5)
UMAP_7B_label +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
pdf("UMAPtimeCourse.pdf",width = 9, height = 5)
UMAP_7B +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
png("UMAPtimeCourse.png",width = 1000, height = 600)
UMAP_7B +
theme(legend.text = element_text(size=16), axis.title.y = element_text(size=16),
axis.title.x = element_text(size=16), axis.text.y = element_text(size =16),
axis.text.x = element_text(size =16))
dev.off()
setwd("/Users/rhalenathomas/GITHUB/CelltypeR/CelltypeR")
# update documentation
library(roxygen2)
roxygen2::roxygenise()  # this seems to load the package
#
roxygenise()
# update the NAMESPACE and DESCRIPTION
# the description file needs to be edited. Don't touch the namespace
devtools::build()
devtools::install()
# to check package versions
packageVersion("packagename")  # use the quotes
setwd("/Users/rhalenathomas/GITHUB/CelltypeR/CelltypeR")
devtools::build()
devtools::install()
# to check package versions
packageVersion("CelltypeR")  # use the quotes
install.packages("CelltypeR")
file_path <- "/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/CellRangerOuts/AST23isogenic/raw_feature_bc_matrix"
file_path <- "/Users/rhalenathomas/Desktop/HG_workshop/"
# load data
control <- Read10X(paste0(file_path,"control_hMO"), strip.suffix = TRUE )
second_libpath <- "/Users/rhalenathomas/Library/CustomR"
library(Seurat, lib.loc = second_libpath)
packageVersion("Seurat")
# load data
control <- Read10X(paste0(file_path,"control_hMO"), strip.suffix = TRUE )
# Set your primary library path
second_libpath <- "/Users/rhalenathomas/Library/CustomR"
.libPaths(c(old_libpaths, second_libpath))
# Install Seurat 5 to a separate library location
install.packages("Seurat", lib = second_libpath)
install.packages("SeuratObject", lib = second_libpath)
install.packages("tidyverse", lib = second_libpath)
